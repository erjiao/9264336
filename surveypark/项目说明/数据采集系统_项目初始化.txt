数据采集系统:
ssh: struts2 spring hibernate.

struts: 开发web程序的框架, 是更加整洁的mvc结构
        分离关注: 拦截器.
        action: 原型(非单例). 线程安全性.
        耦合度低: 和原生的servlet api.
        
hibernate: 持久化技术, 替代jdbc, 封装了数据的访问希捷, 体现了oop思想.
spring: 业务层框架, 管理bean.
        ioc: inverse of control, 反转控制.
        aop: aspect oriented program, 不改变源代码, 还给类增加了新的功能.对oop进行增强》
             本质: 代理.
             通知:
                   前置
                   后置
                   环绕: 事务管理.
                   异常
                   引入


搭建项目:
1. 创建web项目
2. 创建各种包
		com.erjiao.surverpark.model
		com.erjiao.surverpark.service.impl
		com.erjiao.surverpark.struts2.action
		com.erjiao.surverpark.util
3. 引入类库
		    [struts2]
		    	asm-3.3.jar
					asm-commons-3.3.jar
					asm-tree-3.3.jar
					commons-fileupload-1.3.jar
					commons-io-2.0.1.jar
					commons-lang3-3.1.jar
					commons-logging-1.1.3.jar
					freemarker-2.3.19.jar
					javassist-3.11.0.GA.jar
					log4j-1.2.17.jar
					ognl-3.0.6.jar
					struts2-core-2.3.15.3.jar
					xwork-core-2.3.15.3.jar
					
		    [hibernate]
		    	antlr-2.7.7.jar
					hibernate-commons-annotations-4.0.2.Final.jar
					hibernate-core-4.2.4.Final.jar
					hibernate-jpa-2.0-api-1.0.1.Final.jar
					javassist-3.15.0-GA.jar
					hibernate-entitymanager-4.2.4.Final.jar
					hibernate-ehcache-4.2.3.Final.jar
								
		    [spring]
		    	spring-aop-4.0.0.RELEASE.jar
					spring-aspects-4.0.0.RELEASE.jar
					spring-beans-4.0.0.RELEASE.jar
					spring-context-4.0.0.RELEASE.jar
					spring-core-4.0.0.RELEASE.jar
					spring-expression-4.0.0.RELEASE.jar
					spring-jdbc-4.0.0.RELEASE.jar
					spring-orm-4.0.0.RELEASE.jar
					spring-tx-4.0.0.RELEASE.jar
					spring-web-4.0.0.RELEASE.jar
				spring 依赖包:
					com.springsource.net.sf.cglib-2.2.0.jar
					com.springsource.org.aopalliance-1.0.0.jar
					com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
					com.springsource.org.aspectj.tools-1.6.6.RELEASE.jar
					
		    [struts2-spring插件]
		    	struts2-spring-plugin-2.3.15.3.jar
		    	
		    [数据源]
		    	c3p0-0.9.1.2.jar	
		    	    	
		    [驱动程序]
          ojdbc6.jar
          
4.配置项目
	[struts2 + web]
		  [WEB-INF/web.xml]
		      <filter>
				  	<filter-name>struts2</filter-name>
				  	<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
				  </filter>
	  
				  <filter-mapping>
				  	<filter-name>struts2</filter-name>
				  	<url-pattern>/*</url-pattern>
				  </filter-mapping>
				  
			 [config/struts.xml]	 
			    <?xml version="1.0" encoding="UTF-8" ?>
					<!DOCTYPE struts PUBLIC
						"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
						"http://struts.apache.org/dtds/struts-2.3.dtd">
					
					<struts>
						<package name="default" namespace="/" extends="struts-default"></package>
					    <!-- Add packages here -->
	
					</struts>
	
	[spring]
			 [config/applicationContext.xml]
			    1.创建数据库
			    2.配置config/applicationContext.xml
			    <?xml version="1.0" encoding="UTF-8"?>
					<beans
						xmlns="http://www.springframework.org/schema/beans"
						xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
						xmlns:context="http://www.springframework.org/schema/context"
						xmlns:aop="http://www.springframework.org/schema/aop"
						xmlns:tx="http://www.springframework.org/schema/tx"
						xmlns:p="http://www.springframework.org/schema/p"
						xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
					
						<context:property-placeholder location="classpath:db:properties"/>
					
						<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
							<property name="user" value="${jdbc.user}"></property>
							<property name="password" value="${jdbc.password}"></property>
							<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
							<property name="driverClass" value="${jdbc.driverClass}"></property>
							
							<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
							<property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
							<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
							<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
							
						</bean>
					
					</beans>
					
			 [db.properties]
			 		jdbc.user=scott
					jdbc.password=tiger
					jdbc.driverClass=oracle.jdbc.OracleDriver
					jdbc.jdcburl=jdbc:oracle:thin:@localhost:1521:orcl
					
					jdbc.initPoolSize=3
					jdbc.maxPoolSize=10
					jdbc.minPoolSize=2
					jdbc.acquireIncrement=2
					
4.测试数据源
		public class TestDataSource {
			@Test
			public void testConnection() throws SQLException {
				ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
				DataSource ds = (DataSource) ac.getBean("dataSource");
				System.out.println(ds.getConnection());		
			}	
		}
		
5.实体关系分析
	1.类结构:带箭头是单线关联,不带箭头是双向关联
	----------------------------------------
	class User		(1)<------(*)	class Survey  (1)-------(*)  class Page     (1)-------(*)    class Question              
	{								{                       	 {                       		 {                       
		Integer id ;					Integer id ;        	 	Integer id ;        		 	Integer id ;        
		...								...                 	 	...                 		 	...                 
									    User user ;                 Survey survey ;   	            Page page ;             		                         
									    Set<Page> pages ;     	    Set<Question> questions ;                     		                         
	}								}                       	 }                       		 }                       
	
	2.表结构
	------------------------------------------------------------------
	[users]
	+----------+-------------+------+-----+---------+----------------+
	| Field    | Type        | Null | Key | Default | Extra          |
	+----------+-------------+------+-----+---------+----------------+
	| id       | int(11)     | NO   | PRI | NULL    | auto_increment |
	| email    | varchar(50) | YES  |     | NULL    |                |
	| password | varchar(50) | YES  |     | NULL    |                |
	| nickname | varchar(50) | YES  |     | NULL    |                |
	| regdate  | datetime    | YES  |     | NULL    |                |
	+----------+-------------+------+-----+---------+----------------+

	[surveys]
	+---------------+--------------+------+-----+---------+----------------+
	| Field         | Type         | Null | Key | Default | Extra          |
	+---------------+--------------+------+-----+---------+----------------+
	| id            | int(11)      | NO   | PRI | NULL    | auto_increment |
	| title         | varchar(200) | YES  |     | NULL    |                |
	| pretext       | varchar(50)  | YES  |     | NULL    |                |
	| nexttext      | varchar(50)  | YES  |     | NULL    |                |
	| exittext      | varchar(50)  | YES  |     | NULL    |                |
	| donetext      | varchar(50)  | YES  |     | NULL    |                |
	| createtime    | datetime     | YES  |     | NULL    |                |
	| userid        | int(11)      | YES  | MUL | NULL    |                |
	+---------------+--------------+------+-----+---------+----------------+

	[pages]
	+-------------+---------------+------+-----+---------+----------------+
	| Field       | Type          | Null | Key | Default | Extra          |
	+-------------+---------------+------+-----+---------+----------------+
	| id          | int(11)       | NO   | PRI | NULL    | auto_increment |
	| title       | varchar(200)  | YES  |     | NULL    |                |
	| description | varchar(200)  | YES  |     | NULL    |                |
	| surveyid    | int(11)       | YES  | MUL | NULL    |                |
	+-------------+---------------+------+-----+---------+----------------+

	[questions]
	+---------------------+--------------+------+-----+---------+----------------+
	| Field               | Type         | Null | Key | Default | Extra          |
	+---------------------+--------------+------+-----+---------+----------------+
	| id                  | int(11)      | NO   | PRI | NULL    | auto_increment |
	| questiontype        | int(11)      | YES  |     | NULL    |                |
	| title               | varchar(200) | YES  |     | NULL    |                |
	| options             | varchar(200) | YES  |     | NULL    |                |
	| other               | bit(1)       | YES  |     | NULL    |                |
	| otherstyle          | int(11)      | YES  |     | NULL    |                |
	| otherselectoptions  | varchar(200) | YES  |     | NULL    |                |
	| matrixrowtitles     | varchar(200) | YES  |     | NULL    |                |
	| matrixcoltitles     | varchar(200) | YES  |     | NULL    |                |
	| matrixselectoptions | varchar(200) | YES  |     | NULL    |                |
	| pageid              | int(11)      | YES  | MUL | NULL    |                |
	+---------------------+--------------+------+-----+---------+----------------+

	3.映射文件
	------------------------------------------
	[User.hbm.xml]
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
		
	<hibernate-mapping>
		
		<class name="com.erjiao.surverpark.model.User" table="SURVEYPARK_USERS">
			<id name="id" column="id" type="integer">
				<generator class="native" />
			</id>
			<property name="email" column="EMAIL" type="string" length="50"></property>
			<property name="password" column="PASSWORD" type="string" length="50"></property>
			<property name="nickName" column="NICKNAME" type="string" length="50"></property>
			<property name="regDate" column="REGDATE" type="timestamp" update="false"></property>
		</class>
		
	</hibernate-mapping>

	[Survey.hbm.xml]
	<hibernate-mapping package="com.erjiao.surverpark.model">
		
		<class name="Survey" table="SURVEYPARK_SURVEYS">
			<id name="id" column="id" type="integer">
				<generator class="native" />
			</id>
			<property name="title" column="TITLE" type="string" length="50"></property>
			<property name="preText" column="PRETEXT" type="string" length="50"></property>
			<property name="nextText" column="NEXTTEXT" type="string" length="50"></property>
			<property name="exitText" column="EXITTEXT" type="string" length="50"></property>
			<property name="doneText" column="DONETEXT" type="string" length="50"></property>
			<property name="createTime" column="CREATETIME" type="timestamp" update="false"></property>
			
			<!-- 映射从 Survey 到 User 之间多对一关联关系 -->
			<many-to-one name="user" class="User" column="USERID"></many-to-one>
		</class>
		
	</hibernate-mapping>


	[Page.hbm.xml]
	<hibernate-mapping package="com.erjiao.surverpark.model">
		<class name="Page" table="SURVEYPARK_PAGE">
			<id name="id" column="id" type="integer">
				<generator class="native" />
			</id>
			<property name="title" column="TITLE" type="string" length="50"></property>
			<property name="description" column="DESCRIPTION" type="string" length="100"></property>
			
			<!-- 映射从 Page 到 Survey 之间多对一关联关系 -->
			<many-to-one name="survey" class="Survey" column="surveyid"></many-to-one>
			
			<!-- 映射从 Page 到 Question 之间一对多关联关系 -->
			<set name="questions" inverse="true">
				<key column="PAGEID"></key> <!-- 一个页面有多少个question, 通过pageid查 -->
				<one-to-many class="Question"/>
			</set>
		</class>
	</hibernate-mapping>


	[Question.hbm.xml]
	<hibernate-mapping package="com.erjiao.surverpark.model">
		<class name="Question" table="SURVEYPARK_QUESTION">
			<id name="id" column="id" type="integer">
				<generator class="native" />
			</id>
			<property name="questionType" column="QUESTIONTYPE" type="integer"></property>
			<property name="title" column="TITLE" type="string" length="100"></property>
			<property name="options" column="OPTIONS" type="string" length="200"></property>
			<property name="other" column="OTHER" type="boolean"></property>
			<property name="otherStyle" column="OTHERSTYLE" type="integer"></property>
			<property name="otherSelectOptions" column="OTHERSELECTOPTIONS" type="string" length="200"></property>
			
			<property name="matrixRowTitles" column="MATRIXROWTITLES" type="string" length="200"></property>
			<property name="matrixColTitles" column="MATRIXCOLTITLES" type="string" length="200"></property>
			<property name="matrixSelectOptions" column="MATRIXSELECTOPTIONS" type="string" length="200"></property>
			<!-- 映射从 Question 到 Page 之间多对一关联关系 -->
			<many-to-one name="page" class="Page" column="PAGEID"></many-to-one>
		</class>
	</hibernate-mapping>

rose安装以及破解
----------------------
1.解压rose.zip
2.运行setup.exe文件 -->进入安装界面
3.选择J Edition 选项 --> next --> next ..
4.选择安装目录:d:\rational
5.打开授权key的窗口(破解)
	1.解压CRACK.rar文件
	2.选择 import a rational licenses file选项 --> next
	3.进入import license file窗口 --> browse --> 定位D:\Download\rose\CRACK\license.upd文件 --> import --> import --> ok